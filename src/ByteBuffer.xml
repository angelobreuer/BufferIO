<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ByteBuffer</name>
    </assembly>
    <members>
        <member name="T:ByteBuffer.ByteBuffer">
            <summary>
                A class for a bi-directional (write and read), big-endian byte buffer which supports
                buffer pooling and user-provided buffers.
            </summary>
        </member>
        <member name="F:ByteBuffer.ByteBuffer.DefaultInitialCapacity">
            <summary>
                Gets the default initial capacity.
            </summary>
        </member>
        <member name="F:ByteBuffer.ByteBuffer.MaximumStringByteSize">
            <summary>
                The maximum encoded byte size of string.
            </summary>
        </member>
        <member name="F:ByteBuffer.ByteBuffer._empty">
            <summary>
                An empty byte buffer.
            </summary>
        </member>
        <member name="F:ByteBuffer.ByteBuffer._origin">
            <summary>
                The general buffer write offset (not the writing position).
            </summary>
        </member>
        <member name="F:ByteBuffer.ByteBuffer._pool">
            <summary>
                The array pool the buffer was rent from.
            </summary>
        </member>
        <member name="F:ByteBuffer.ByteBuffer._buffer">
            <summary>
                The local buffer storing the data.
            </summary>
        </member>
        <member name="F:ByteBuffer.ByteBuffer._capacity">
            <summary>
                The number of bytes allocated for the buffer.
            </summary>
        </member>
        <member name="F:ByteBuffer.ByteBuffer._cursor">
            <summary>
                The current read / write position in the <see cref="F:ByteBuffer.ByteBuffer._buffer"/>.
            </summary>
        </member>
        <member name="F:ByteBuffer.ByteBuffer._disposed">
            <summary>
                A value indicating whether the buffer was disposed.
            </summary>
        </member>
        <member name="F:ByteBuffer.ByteBuffer._length">
            <summary>
                The buffer length.
            </summary>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:ByteBuffer.ByteBuffer"/> class.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">the buffer offset</param>
            <param name="count">the buffer byte count allocated for the buffer</param>
            <param name="writable">a value indicating whether the buffer should support writing</param>
            <param name="exposable">
                a value indicating whether the specified <paramref name="buffer"/> should be exposable
            </param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.#ctor(System.Byte[],System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:ByteBuffer.ByteBuffer"/> class.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="count">the buffer byte count allocated for the buffer</param>
            <param name="writable">a value indicating whether the buffer should support writing</param>
            <param name="exposable">
                a value indicating whether the specified <paramref name="buffer"/> should be exposable
            </param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.#ctor(System.Byte[],System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:ByteBuffer.ByteBuffer"/> class.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="writable">a value indicating whether the buffer should support writing</param>
            <param name="exposable">
                a value indicating whether the specified <paramref name="buffer"/> should be exposable
            </param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.#ctor(System.ArraySegment{System.Byte},System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:ByteBuffer.ByteBuffer"/> class.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="writable">a value indicating whether the buffer should support writing</param>
            <param name="exposable">
                a value indicating whether the specified <paramref name="buffer"/> should be exposable
            </param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.#ctor(System.Buffers.ArrayPool{System.Byte},System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:ByteBuffer.ByteBuffer"/> class with a pooled buffer backend.
            </summary>
            <param name="arrayPool">
                the byte array pool from which the <see cref="T:ByteBuffer.ByteBuffer"/> should be pooled from
            </param>
            <param name="initialCapacity">the initial buffer capacity</param>
            <param name="expandable">a value indicating whether the buffer should be expandable</param>
            <param name="writable">a value indicating whether the buffer should support writing</param>
            <param name="exposable">
                a value indicating whether the specified <see cref="T:ByteBuffer.ByteBuffer"/> should be exposable
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="initialCapacity"/> is negative.
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.#ctor(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:ByteBuffer.ByteBuffer"/> class with a pooled buffer backend.
            </summary>
            <param name="initialCapacity">the initial buffer capacity</param>
            <param name="expandable">a value indicating whether the buffer should be expandable</param>
            <param name="writable">a value indicating whether the buffer should support writing</param>
            <param name="exposable">
                a value indicating whether the specified <see cref="T:ByteBuffer.ByteBuffer"/> should be exposable
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="initialCapacity"/> is negative.
            </exception>
        </member>
        <member name="P:ByteBuffer.ByteBuffer.DefaultBufferPool">
            <summary>
                Gets the default array pool for pooled <see cref="T:ByteBuffer.ByteBuffer"/> instances.
            </summary>
        </member>
        <member name="P:ByteBuffer.ByteBuffer.Capacity">
            <summary>
                Gets or sets the number of allocated internal buffer bytes.
            </summary>
        </member>
        <member name="P:ByteBuffer.ByteBuffer.Endianness">
            <summary>
                Gets the buffer endianness.
            </summary>
        </member>
        <member name="P:ByteBuffer.ByteBuffer.IsEmpty">
            <summary>
                Gets a value indicating whether the buffer is empty.
            </summary>
        </member>
        <member name="P:ByteBuffer.ByteBuffer.IsExpandable">
            <summary>
                Gets a value indicating whether the buffer is expandable.
            </summary>
        </member>
        <member name="P:ByteBuffer.ByteBuffer.IsExposable">
            <summary>
                Gets a value indicating whether the internal buffer is exposable.
            </summary>
        </member>
        <member name="P:ByteBuffer.ByteBuffer.IsPooled">
            <summary>
                Gets a value indicating whether the buffer was pooled from an array pool.
            </summary>
        </member>
        <member name="P:ByteBuffer.ByteBuffer.IsReadOnly">
            <summary>
                Gets a value indicating whether the buffer is read-only.
            </summary>
        </member>
        <member name="P:ByteBuffer.ByteBuffer.Length">
            <summary>
                Gets the current length of the buffer.
            </summary>
        </member>
        <member name="P:ByteBuffer.ByteBuffer.Position">
            <summary>
                Gets or sets the current buffer cursor position.
            </summary>
        </member>
        <member name="P:ByteBuffer.ByteBuffer.Remaining">
            <summary>
                Gets the amount of bytes remaining until the buffer is full.
            </summary>
        </member>
        <member name="P:ByteBuffer.ByteBuffer.Item(System.Int32)">
            <summary>
                Gets or sets the <see cref="T:System.Byte"/> at the specified zero-based <paramref name="index"/>.
            </summary>
            <param name="index">the zero-based absolute <see cref="T:System.Byte"/> index</param>
            <returns>the <see cref="T:System.Byte"/> at the specified zero-based <paramref name="index"/></returns>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ValidateBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Validates the specified buffer specification ( <paramref name="offset"/> and
                <paramref name="count"/> in relation with the specified <paramref name="buffer"/>).
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">the byte offset</param>
            <param name="count">the number of bytes (relative to <paramref name="offset"/>)</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="offset"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="buffer"/> is too small for the specified <paramref name="count"/>.
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.AsMemoryStream">
            <summary>
                Creates a memory stream from the buffer.
            </summary>
            <returns>the memory stream</returns>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Clear">
            <summary>
                Clears the buffer.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.CopyTo(System.IO.Stream,System.Boolean)">
            <summary>
                Copies the internal buffer to the specified <paramref name="stream"/>.
            </summary>
            <param name="stream">the stream to copy the buffer to</param>
            <param name="full">
                a value indicating whether the full buffer should be copied (
                <see langword="false"/>, from start to end); or the buffer from the current cursor to
                the end ( <see langword="true"/>).
            </param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="stream"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.CopyToAsync(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Copies the internal buffer to the specified <paramref name="stream"/> asynchronously.
            </summary>
            <param name="stream">the stream to copy the buffer to</param>
            <param name="full">
                a value indicating whether the full buffer should be copied (
                <see langword="false"/>, from start to end); or the buffer from the current cursor to
                the end ( <see langword="true"/>).
            </param>
            <param name="cancellationToken">
                a cancellation token used to propagate notification that the asynchronous operation
                should be canceled.
            </param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="stream"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Dispose">
            <summary>
                Disposes the <see cref="T:ByteBuffer.ByteBuffer"/> instance and releases the buffer if it was rent
                from an array pool ( <see cref="P:ByteBuffer.ByteBuffer.IsPooled"/>).
            </summary>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.GetBuffer">
            <summary>
                Gets the internal buffer.
            </summary>
            <returns>the internal buffer</returns>
            <exception cref="T:System.UnauthorizedAccessException">
                thrown if the buffer is not exposable ( <see cref="P:ByteBuffer.ByteBuffer.IsExposable"/>).
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Read(System.Int32)">
            <summary>
                Reads a <see cref="T:System.Byte"/> sequence.
            </summary>
            <param name="count">the number of bytes to read</param>
            <returns>the <see cref="T:System.Byte"/> sequence</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the buffer is too small.</exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ReadBoolean">
            <summary>
                Reads a <see cref="T:System.Boolean"/> value from the buffer.
            </summary>
            <returns>the value read</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the buffer is too small.</exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ReadByte">
            <summary>
                Reads a <see cref="T:System.Byte"/> value from the buffer.
            </summary>
            <returns>the value read</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the buffer is too small.</exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ReadBytes(System.Byte[],System.Int32)">
            <summary>
                Reads a <see cref="T:System.Byte"/> sequence and writes it to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="count">the number of bytes to read</param>
            <exception cref="T:System.InvalidOperationException">thrown if the buffer is too small.</exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ReadBytes(System.Byte[])">
            <summary>
                Reads a <see cref="T:System.Byte"/> sequence and writes it to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">the buffer</param>
            <exception cref="T:System.InvalidOperationException">thrown if the buffer is too small.</exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ReadBytes(System.ArraySegment{System.Byte})">
            <summary>
                Reads a <see cref="T:System.Byte"/> sequence and writes it to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">the buffer</param>
            <exception cref="T:System.InvalidOperationException">thrown if the buffer is too small.</exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ReadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads a <see cref="T:System.Byte"/> sequence and writes it to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">the buffer write offset</param>
            <param name="count">the number of bytes to read</param>
            <exception cref="T:System.InvalidOperationException">thrown if the buffer is too small.</exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ReadDouble">
            <summary>
                Reads a <see cref="T:System.Double"/> value from the buffer.
            </summary>
            <returns>the value read</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the buffer is too small.</exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ReadFloat">
            <summary>
                Reads a <see cref="T:System.Single"/> value from the buffer.
            </summary>
            <returns>the value read</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the buffer is too small.</exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ReadGuid">
            <summary>
                Reads a <see cref="T:System.Guid"/> value from the buffer.
            </summary>
            <returns>the value read</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the buffer is too small.</exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ReadInt">
            <summary>
                Reads an <see cref="T:System.Int32"/> value from the buffer.
            </summary>
            <returns>the value read</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the buffer is too small.</exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ReadLong">
            <summary>
                Reads a <see cref="T:System.Int64"/> value from the buffer.
            </summary>
            <returns>the value read</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the buffer is too small.</exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ReadSByte">
            <summary>
                Reads a <see cref="T:System.SByte"/> value from the buffer.
            </summary>
            <returns>the value read</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the buffer is too small.</exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ReadShort">
            <summary>
                Reads a <see cref="T:System.Int16"/> value from the buffer.
            </summary>
            <returns>the value read</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the buffer is too small.</exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ReadString">
            <summary>
                Reads an UTF-8 encoded, length-prefixed <see cref="T:System.String"/>.
            </summary>
            <returns>the string read</returns>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ReadString(System.Text.Encoding)">
            <summary>
                Reads a length-prefixed <see cref="T:System.String"/> using the specified <paramref name="encoding"/>.
            </summary>
            <param name="encoding">the encoding to use</param>
            <returns>the string read</returns>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ReadUInt">
            <summary>
                Reads an <see cref="T:System.UInt32"/> value from the buffer.
            </summary>
            <returns>the value read</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the buffer is too small.</exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ReadULong">
            <summary>
                Reads an <see cref="T:System.UInt64"/> value from the buffer.
            </summary>
            <returns>the value read</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the buffer is too small.</exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ReadUShort">
            <summary>
                Reads an <see cref="T:System.UInt16"/> value from the buffer.
            </summary>
            <returns>the value read</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the buffer is too small.</exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Reset">
            <summary>
                Resets the cursor position.
            </summary>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.ToArray">
            <summary>
                Creates an array of the buffer data.
            </summary>
            <returns>an array of the buffer data</returns>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Trim">
            <summary>
                Trims the internal buffer to the number of bytes used.
            </summary>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.TryGetBuffer(System.ArraySegment{System.Byte}@)">
            <summary>
                Tries to get the internal buffer.
            </summary>
            <param name="buffer">the internal buffer</param>
            <returns>a value indicating whether the buffer could be get</returns>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.Byte)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.Byte[],System.Int32)">
            <summary>
                Writes the specified <paramref name="buffer"/> to the internal buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="count">the number of bytes to write</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.Byte[])">
            <summary>
                Writes the specified <paramref name="buffer"/> to the internal buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.ArraySegment{System.Byte})">
            <summary>
                Writes the specified <paramref name="buffer"/> to the internal buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Writes the specified <paramref name="buffer"/> to the internal buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">the buffer read offset</param>
            <param name="count">the number of bytes to write</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="offset"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="buffer"/> is too small for the specified <paramref name="count"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.Int32)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.UInt32)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.UInt16)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.Single)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.Double)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.Boolean)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.Int16)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.SByte)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.Int64)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.UInt64)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.Guid)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.String,System.Int32)">
            <summary>
                Writes a string encoded in UTF-8 prefixed with a 2-byte <see cref="T:System.UInt16"/> length
                prefix to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <param name="charCount">the number of characters</param>
            <returns>the number of total bytes written (including 2-byte length prefix)</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.String)">
            <summary>
                Writes a string encoded in UTF-8 prefixed with a 2-byte <see cref="T:System.UInt16"/> length
                prefix to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <returns>the number of total bytes written (including 2-byte length prefix)</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
            <exception cref="T:System.ArgumentException">
                thrown if the specified <paramref name="value"/> overflows the maximum encoded byte
                length ( <c>0xFFFF</c>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.String,System.Int32,System.Int32)">
            <summary>
                Writes a string encoded in UTF-8 prefixed with a 2-byte <see cref="T:System.UInt16"/> length
                prefix to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <param name="charIndex">the character index</param>
            <param name="charCount">the number of characters</param>
            <returns>the number of total bytes written (including 2-byte length prefix)</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
            <exception cref="T:System.ArgumentException">
                thrown if the specified <paramref name="value"/> overflows the maximum encoded byte
                length ( <c>0xFFFF</c>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.String,System.Int32,System.Text.Encoding)">
            <summary>
                Writes a string encoded in the specified <paramref name="encoding"/> prefixed with a
                2-byte <see cref="T:System.UInt16"/> length prefix to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <param name="charCount">the number of characters</param>
            <param name="encoding">the encoding to use</param>
            <returns>the number of total bytes written (including 2-byte length prefix)</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
            <exception cref="T:System.ArgumentException">
                thrown if the specified <paramref name="value"/> overflows the maximum encoded byte
                length ( <c>0xFFFF</c>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.String,System.Text.Encoding)">
            <summary>
                Writes a string encoded in the specified <paramref name="encoding"/> prefixed with a
                2-byte <see cref="T:System.UInt16"/> length prefix to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <param name="encoding">the encoding to use</param>
            <returns>the number of total bytes written (including 2-byte length prefix)</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
            <exception cref="T:System.ArgumentException">
                thrown if the specified <paramref name="value"/> overflows the maximum encoded byte
                length ( <c>0xFFFF</c>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.Write(System.String,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
                Writes a string encoded in the specified <paramref name="encoding"/> prefixed with a
                2-byte <see cref="T:System.UInt16"/> length prefix to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <param name="charIndex">the character index</param>
            <param name="charCount">the number of characters</param>
            <param name="encoding">the encoding to use</param>
            <returns>the number of total bytes written (including 2-byte length prefix)</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
            <exception cref="T:System.ArgumentException">
                thrown if the specified <paramref name="value"/> overflows the maximum encoded byte
                length ( <c>0xFFFF</c>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.EnsureCapacity(System.Int32)">
            <summary>
                Ensures that the buffer has the specified <paramref name="capacity"/>.
            </summary>
            <param name="capacity">the target buffer capacity</param>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.EnsureExpandable">
            <summary>
                Ensures that the buffer is expandable.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is not expandable ( <see cref="P:ByteBuffer.ByteBuffer.IsExpandable"/>)
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.EnsureNotDisposed">
            <summary>
                Ensures that the instance was not disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
                thrown if the <see cref="T:ByteBuffer.ByteBuffer"/> instance is disposed.
            </exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.EnsureRemaining(System.Int32)">
            <summary>
                Ensures that a specific amount of bytes is remaining to read / write in the buffer.
            </summary>
            <param name="count">the number of bytes</param>
            <exception cref="T:System.InvalidOperationException">thrown if the buffer is too small.</exception>
        </member>
        <member name="M:ByteBuffer.ByteBuffer.EnsureWritable">
            <summary>
                Ensures that the buffer is writable.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                thrown if the buffer is read-only ( <see cref="P:ByteBuffer.ByteBuffer.IsReadOnly"/>)
            </exception>
        </member>
        <member name="T:ByteBuffer.IO.BinaryReader">
            <summary>
                Wrapper class for a big-endian binary reader that reads from an underlying stream.
            </summary>
        </member>
        <member name="F:ByteBuffer.IO.BinaryReader._readBuffer">
            <summary>
                The internal read buffer.
            </summary>
            <seealso cref="M:ByteBuffer.IO.BinaryReader.FillReadBuffer(System.Int32)"/>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:ByteBuffer.IO.BinaryReader"/> class.
            </summary>
            <param name="baseStream">the base stream to write to / read from</param>
            <param name="leaveOpen">
                a value indicating whether the specified <paramref name="baseStream"/> should be left
                open when the <see cref="T:ByteBuffer.IO.BinaryReader"/> is closed.
            </param>
        </member>
        <member name="P:ByteBuffer.IO.BinaryReader.BaseStream">
            <summary>
                Gets the base stream to write to / read from.
            </summary>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.Dispose">
            <summary>
                Disposes the <see cref="P:ByteBuffer.IO.BinaryReader.BaseStream"/> if specified in constructor (leaveOpen = <see langword="false"/>).
            </summary>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.Read(System.Int32)">
            <summary>
                Reads a <see cref="T:System.Byte"/> sequence.
            </summary>
            <param name="count">the number of bytes to read</param>
            <returns>the <see cref="T:System.Byte"/> sequence</returns>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.ReadBoolean">
            <summary>
                Reads a <see cref="T:System.Boolean"/> value.
            </summary>
            <returns>the value read</returns>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.ReadByte">
            <summary>
                Reads a <see cref="T:System.Byte"/>.
            </summary>
            <returns>the value read</returns>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.ReadBytes(System.Byte[],System.Int32)">
            <summary>
                Reads a <see cref="T:System.Byte"/> sequence and writes it to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="count">the number of bytes to read</param>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.ReadBytes(System.Byte[])">
            <summary>
                Reads a <see cref="T:System.Byte"/> sequence and writes it to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">the buffer</param>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.ReadBytes(System.ArraySegment{System.Byte})">
            <summary>
                Reads a <see cref="T:System.Byte"/> sequence and writes it to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">the buffer</param>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.ReadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads a <see cref="T:System.Byte"/> sequence and writes it to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">the buffer write offset</param>
            <param name="count">the number of bytes to read</param>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.ReadDouble">
            <summary>
                Reads a <see cref="T:System.Double"/> value.
            </summary>
            <returns>the value read</returns>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.ReadFloat">
            <summary>
                Reads a <see cref="T:System.Single"/> value.
            </summary>
            <returns>the value read</returns>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.ReadGuid">
            <summary>
                Reads a <see cref="T:System.Guid"/> value.
            </summary>
            <returns>the value read</returns>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.ReadInt">
            <summary>
                Reads a <see cref="T:System.Int32"/> value.
            </summary>
            <returns>the value read</returns>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.ReadLong">
            <summary>
                Reads a <see cref="T:System.Int64"/> value.
            </summary>
            <returns>the value read</returns>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.ReadSByte">
            <summary>
                Reads a <see cref="T:System.SByte"/> value.
            </summary>
            <returns>the value read</returns>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.ReadShort">
            <summary>
                Reads a <see cref="T:System.Int16"/> value.
            </summary>
            <returns>the value read</returns>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.ReadString">
            <summary>
                Reads an UTF-8 encoded, length-prefixed <see cref="T:System.String"/>.
            </summary>
            <returns>the string read</returns>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.ReadString(System.Text.Encoding)">
            <summary>
                Reads a length-prefixed <see cref="T:System.String"/> using the specified <paramref name="encoding"/>.
            </summary>
            <param name="encoding">the encoding to use</param>
            <returns>the string read</returns>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.ReadUInt">
            <summary>
                Reads a <see cref="T:System.UInt32"/> value.
            </summary>
            <returns>the value read</returns>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.ReadULong">
            <summary>
                Reads a <see cref="T:System.UInt64"/> value.
            </summary>
            <returns>the value read</returns>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.ReadUShort">
            <summary>
                Reads a <see cref="T:System.UInt16"/> value.
            </summary>
            <returns>the value read</returns>
        </member>
        <member name="M:ByteBuffer.IO.BinaryReader.FillReadBuffer(System.Int32)">
            <summary>
                Fills the read buffer with the specified number of bytes ( <paramref name="count"/>).
            </summary>
            <param name="count">the number of bytes to fill the read buffer with</param>
        </member>
        <member name="T:ByteBuffer.IO.BinaryWriter">
            <summary>
                Wrapper class for a big-endian binary writer that writes to an underlying stream.
            </summary>
        </member>
        <member name="F:ByteBuffer.IO.BinaryWriter.MaximumStringByteSize">
            <summary>
                The maximum encoded byte size of string.
            </summary>
        </member>
        <member name="F:ByteBuffer.IO.BinaryWriter._writeBuffer">
            <summary>
                The internal write buffer.
            </summary>
            <seealso cref="M:ByteBuffer.IO.BinaryWriter.FlushWriteBuffer(System.Int32)"/>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:ByteBuffer.IO.BinaryWriter"/> class.
            </summary>
            <param name="baseStream">the base stream to write to / read from</param>
            <param name="leaveOpen">
                a value indicating whether the specified <paramref name="baseStream"/> should be left
                open when the <see cref="T:ByteBuffer.IO.BinaryWriter"/> is closed.
            </param>
        </member>
        <member name="P:ByteBuffer.IO.BinaryWriter.BaseStream">
            <summary>
                Gets the base stream to write to / read from.
            </summary>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Dispose">
            <summary>
                Disposes the <see cref="P:ByteBuffer.IO.BinaryWriter.BaseStream"/> if specified in constructor (leaveOpen = <see langword="false"/>).
            </summary>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.Boolean)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.Byte)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.Byte[])">
            <summary>
                Writes the specified <paramref name="buffer"/> to the internal buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.ArraySegment{System.Byte})">
            <summary>
                Writes the specified <paramref name="buffer"/> to the internal buffer.
            </summary>
            <param name="buffer">the buffer</param>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Writes the specified <paramref name="buffer"/> to the internal buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">the buffer read offset</param>
            <param name="count">the number of bytes to write</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="offset"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="buffer"/> is too small for the specified <paramref name="count"/>.
            </exception>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.Int32)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.UInt32)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.UInt16)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.Single)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.Double)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.Int16)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.SByte)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.Int64)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.UInt64)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.Guid)">
            <summary>
                Writes the specified <paramref name="value"/> to the buffer.
            </summary>
            <param name="value">the value to write</param>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.String,System.Int32)">
            <summary>
                Writes a string encoded in UTF-8 prefixed with a 2-byte <see cref="T:System.UInt16"/> length
                prefix to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <param name="charCount">the number of characters</param>
            <returns>the number of total bytes written (including 2-byte length prefix)</returns>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.String)">
            <summary>
                Writes a string encoded in UTF-8 prefixed with a 2-byte <see cref="T:System.UInt16"/> length
                prefix to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <returns>the number of total bytes written (including 2-byte length prefix)</returns>
            <exception cref="T:System.ArgumentException">
                thrown if the specified <paramref name="value"/> overflows the maximum encoded byte
                length ( <c>0xFFFF</c>)
            </exception>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.String,System.Int32,System.Int32)">
            <summary>
                Writes a string encoded in UTF-8 prefixed with a 2-byte <see cref="T:System.UInt16"/> length
                prefix to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <param name="charIndex">the character index</param>
            <param name="charCount">the number of characters</param>
            <returns>the number of total bytes written (including 2-byte length prefix)</returns>
            <exception cref="T:System.ArgumentException">
                thrown if the specified <paramref name="value"/> overflows the maximum encoded byte
                length ( <c>0xFFFF</c>)
            </exception>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.String,System.Int32,System.Text.Encoding)">
            <summary>
                Writes a string encoded in the specified <paramref name="encoding"/> prefixed with a
                2-byte <see cref="T:System.UInt16"/> length prefix to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <param name="charCount">the number of characters</param>
            <param name="encoding">the encoding to use</param>
            <returns>the number of total bytes written (including 2-byte length prefix)</returns>
            <exception cref="T:System.ArgumentException">
                thrown if the specified <paramref name="value"/> overflows the maximum encoded byte
                length ( <c>0xFFFF</c>)
            </exception>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.String,System.Text.Encoding)">
            <summary>
                Writes a string encoded in the specified <paramref name="encoding"/> prefixed with a
                2-byte <see cref="T:System.UInt16"/> length prefix to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <param name="encoding">the encoding to use</param>
            <returns>the number of total bytes written (including 2-byte length prefix)</returns>
            <exception cref="T:System.ArgumentException">
                thrown if the specified <paramref name="value"/> overflows the maximum encoded byte
                length ( <c>0xFFFF</c>)
            </exception>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.Write(System.String,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
                Writes a string encoded in the specified <paramref name="encoding"/> prefixed with a
                2-byte <see cref="T:System.UInt16"/> length prefix to the buffer.
            </summary>
            <param name="value">the value to write</param>
            <param name="charIndex">the character index</param>
            <param name="charCount">the number of characters</param>
            <param name="encoding">the encoding to use</param>
            <returns>the number of total bytes written (including 2-byte length prefix)</returns>
            <exception cref="T:System.ArgumentException">
                thrown if the specified <paramref name="value"/> overflows the maximum encoded byte
                length ( <c>0xFFFF</c>)
            </exception>
        </member>
        <member name="M:ByteBuffer.IO.BinaryWriter.FlushWriteBuffer(System.Int32)">
            <summary>
                Flushes the write buffer.
            </summary>
            <param name="count">the number of bytes to flush</param>
        </member>
        <member name="T:ByteBuffer.Util.BigEndian">
            <summary>
                An utility class used for the conversion between byte buffers and value types.
            </summary>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Int32)">
            <summary>
                Encodes the specified <paramref name="value"/> to a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="value">the value to encode</param>
            <returns>the <see cref="T:System.Byte"/> array</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.UInt32)">
            <summary>
                Encodes the specified <paramref name="value"/> to a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="value">the value to encode</param>
            <returns>the <see cref="T:System.Byte"/> array</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.UInt16)">
            <summary>
                Encodes the specified <paramref name="value"/> to a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="value">the value to encode</param>
            <returns>the <see cref="T:System.Byte"/> array</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Int16)">
            <summary>
                Encodes the specified <paramref name="value"/> to a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="value">the value to encode</param>
            <returns>the <see cref="T:System.Byte"/> array</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Int64)">
            <summary>
                Encodes the specified <paramref name="value"/> to a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="value">the value to encode</param>
            <returns>the <see cref="T:System.Byte"/> array</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.UInt64)">
            <summary>
                Encodes the specified <paramref name="value"/> to a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="value">the value to encode</param>
            <returns>the <see cref="T:System.Byte"/> array</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Decimal)">
            <summary>
                Encodes the specified <paramref name="value"/> to a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="value">the value to encode</param>
            <returns>the <see cref="T:System.Byte"/> array</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Double)">
            <summary>
                Encodes the specified <paramref name="value"/> to a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="value">the value to encode</param>
            <returns>the <see cref="T:System.Byte"/> array</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Single)">
            <summary>
                Encodes the specified <paramref name="value"/> to a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="value">the value to encode</param>
            <returns>the <see cref="T:System.Byte"/> array</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Encodes the specified <paramref name="value"/> to the specified
                <paramref name="buffer"/> at the specified zero-based <paramref name="byteOffset"/>.
            </summary>
            <param name="buffer">the buffer to encode the value to</param>
            <param name="value">the value</param>
            <param name="byteOffset">the byte offset</param>
            <returns>the buffer position (for the next value)</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="byteOffset"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="buffer"/> is too small for the value.
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte[],System.UInt32,System.Int32)">
            <summary>
                Encodes the specified <paramref name="value"/> to the specified
                <paramref name="buffer"/> at the specified zero-based <paramref name="byteOffset"/>.
            </summary>
            <param name="buffer">the buffer to encode the value to</param>
            <param name="value">the value</param>
            <param name="byteOffset">the byte offset</param>
            <returns>the buffer position (for the next value)</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="byteOffset"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="buffer"/> is too small for the value.
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte[],System.Int16,System.Int32)">
            <summary>
                Encodes the specified <paramref name="value"/> to the specified
                <paramref name="buffer"/> at the specified zero-based <paramref name="byteOffset"/>.
            </summary>
            <param name="buffer">the buffer to encode the value to</param>
            <param name="value">the value</param>
            <param name="byteOffset">the byte offset</param>
            <returns>the buffer position (for the next value)</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="byteOffset"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="buffer"/> is too small for the value.
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte[],System.UInt16,System.Int32)">
            <summary>
                Encodes the specified <paramref name="value"/> to the specified
                <paramref name="buffer"/> at the specified zero-based <paramref name="byteOffset"/>.
            </summary>
            <param name="buffer">the buffer to encode the value to</param>
            <param name="value">the value</param>
            <param name="byteOffset">the byte offset</param>
            <returns>the buffer position (for the next value)</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="byteOffset"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="buffer"/> is too small for the value.
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte[],System.Int64,System.Int32)">
            <summary>
                Encodes the specified <paramref name="value"/> to the specified
                <paramref name="buffer"/> at the specified zero-based <paramref name="byteOffset"/>.
            </summary>
            <param name="buffer">the buffer to encode the value to</param>
            <param name="value">the value</param>
            <param name="byteOffset">the byte offset</param>
            <returns>the buffer position (for the next value)</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="byteOffset"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="buffer"/> is too small for the value.
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte[],System.UInt64,System.Int32)">
            <summary>
                Encodes the specified <paramref name="value"/> to the specified
                <paramref name="buffer"/> at the specified zero-based <paramref name="byteOffset"/>.
            </summary>
            <param name="buffer">the buffer to encode the value to</param>
            <param name="value">the value</param>
            <param name="byteOffset">the byte offset</param>
            <returns>the buffer position (for the next value)</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="byteOffset"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="buffer"/> is too small for the value.
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte[],System.SByte,System.Int32)">
            <summary>
                Encodes the specified <paramref name="value"/> to the specified
                <paramref name="buffer"/> at the specified zero-based <paramref name="byteOffset"/>.
            </summary>
            <param name="buffer">the buffer to encode the value to</param>
            <param name="value">the value</param>
            <param name="byteOffset">the byte offset</param>
            <returns>the buffer position (for the next value)</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="byteOffset"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="buffer"/> is too small for the value.
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte[],System.Byte,System.Int32)">
            <summary>
                Encodes the specified <paramref name="value"/> to the specified
                <paramref name="buffer"/> at the specified zero-based <paramref name="byteOffset"/>.
            </summary>
            <param name="buffer">the buffer to encode the value to</param>
            <param name="value">the value</param>
            <param name="byteOffset">the byte offset</param>
            <returns>the buffer position (for the next value)</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="byteOffset"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="buffer"/> is too small for the value.
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte[],System.Boolean,System.Int32)">
            <summary>
                Encodes the specified <paramref name="value"/> to the specified
                <paramref name="buffer"/> at the specified zero-based <paramref name="byteOffset"/>.
            </summary>
            <param name="buffer">the buffer to encode the value to</param>
            <param name="value">the value</param>
            <param name="byteOffset">the byte offset</param>
            <returns>the buffer position (for the next value)</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="byteOffset"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="buffer"/> is too small for the value.
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte[],System.Single,System.Int32)">
            <summary>
                Encodes the specified <paramref name="value"/> to the specified
                <paramref name="buffer"/> at the specified zero-based <paramref name="byteOffset"/>.
            </summary>
            <param name="buffer">the buffer to encode the value to</param>
            <param name="value">the value</param>
            <param name="byteOffset">the byte offset</param>
            <returns>the buffer position (for the next value)</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="byteOffset"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="buffer"/> is too small for the value.
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte[],System.Double,System.Int32)">
            <summary>
                Encodes the specified <paramref name="value"/> to the specified
                <paramref name="buffer"/> at the specified zero-based <paramref name="byteOffset"/>.
            </summary>
            <param name="buffer">the buffer to encode the value to</param>
            <param name="value">the value</param>
            <param name="byteOffset">the byte offset</param>
            <returns>the buffer position (for the next value)</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="byteOffset"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="buffer"/> is too small for the value.
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte[],System.Decimal,System.Int32)">
            <summary>
                Encodes the specified <paramref name="value"/> to the specified
                <paramref name="buffer"/> at the specified zero-based <paramref name="byteOffset"/>.
            </summary>
            <param name="buffer">the buffer to encode the value to</param>
            <param name="value">the value</param>
            <param name="byteOffset">the byte offset</param>
            <returns>the buffer position (for the next value)</returns>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="buffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="byteOffset"/> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="buffer"/> is too small for the value.
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte*,System.Int32)">
            <summary>
                Copies the specified <paramref name="value"/> to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">
                a pointer pointing to the memory address of the first byte element of the buffer
            </param>
            <param name="value">the value to copy</param>
            <returns>
                a pointer pointing to the memory address of the next free byte of the specified <paramref name="buffer"/>
            </returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte*,System.UInt32)">
            <summary>
                Copies the specified <paramref name="value"/> to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">
                a pointer pointing to the memory address of the first byte element of the buffer
            </param>
            <param name="value">the value to copy</param>
            <returns>
                a pointer pointing to the memory address of the next free byte of the specified <paramref name="buffer"/>
            </returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte*,System.Boolean)">
            <summary>
                Copies the specified <paramref name="value"/> to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">
                a pointer pointing to the memory address of the first byte element of the buffer
            </param>
            <param name="value">the value to copy</param>
            <returns>
                a pointer pointing to the memory address of the next free byte of the specified <paramref name="buffer"/>
            </returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte*,System.Byte)">
            <summary>
                Copies the specified <paramref name="value"/> to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">
                a pointer pointing to the memory address of the first byte element of the buffer
            </param>
            <param name="value">the value to copy</param>
            <returns>
                a pointer pointing to the memory address of the next free byte of the specified <paramref name="buffer"/>
            </returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte*,System.SByte)">
            <summary>
                Copies the specified <paramref name="value"/> to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">
                a pointer pointing to the memory address of the first byte element of the buffer
            </param>
            <param name="value">the value to copy</param>
            <returns>
                a pointer pointing to the memory address of the next free byte of the specified <paramref name="buffer"/>
            </returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte*,System.Int16)">
            <summary>
                Copies the specified <paramref name="value"/> to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">
                a pointer pointing to the memory address of the first byte element of the buffer
            </param>
            <param name="value">the value to copy</param>
            <returns>
                a pointer pointing to the memory address of the next free byte of the specified <paramref name="buffer"/>
            </returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte*,System.UInt16)">
            <summary>
                Copies the specified <paramref name="value"/> to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">
                a pointer pointing to the memory address of the first byte element of the buffer
            </param>
            <param name="value">the value to copy</param>
            <returns>
                a pointer pointing to the memory address of the next free byte of the specified <paramref name="buffer"/>
            </returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte*,System.Double)">
            <summary>
                Copies the specified <paramref name="value"/> to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">
                a pointer pointing to the memory address of the first byte element of the buffer
            </param>
            <param name="value">the value to copy</param>
            <returns>
                a pointer pointing to the memory address of the next free byte of the specified <paramref name="buffer"/>
            </returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte*,System.Single)">
            <summary>
                Copies the specified <paramref name="value"/> to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">
                a pointer pointing to the memory address of the first byte element of the buffer
            </param>
            <param name="value">the value to copy</param>
            <returns>
                a pointer pointing to the memory address of the next free byte of the specified <paramref name="buffer"/>
            </returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte*,System.Decimal)">
            <summary>
                Copies the specified <paramref name="value"/> to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">
                a pointer pointing to the memory address of the first byte element of the buffer
            </param>
            <param name="value">the value to copy</param>
            <returns>
                a pointer pointing to the memory address of the next free byte of the specified <paramref name="buffer"/>
            </returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte*,System.Int64)">
            <summary>
                Copies the specified <paramref name="value"/> to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">
                a pointer pointing to the memory address of the first byte element of the buffer
            </param>
            <param name="value">the value to copy</param>
            <returns>
                a pointer pointing to the memory address of the next free byte of the specified <paramref name="buffer"/>
            </returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.GetBytes(System.Byte*,System.UInt64)">
            <summary>
                Copies the specified <paramref name="value"/> to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">
                a pointer pointing to the memory address of the first byte element of the buffer
            </param>
            <param name="value">the value to copy</param>
            <returns>
                a pointer pointing to the memory address of the next free byte of the specified <paramref name="buffer"/>
            </returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToDouble(System.Byte*,System.Int32)">
            <summary>
                Converts the <paramref name="buffer"/> to an <see cref="T:System.Double"/> value.
            </summary>
            <param name="buffer">a pointer pointing to the memory address of the buffer</param>
            <param name="offset">the zero-based buffer offset</param>
            <returns>the <see cref="T:System.Double"/> value</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToDouble(System.Byte[],System.Int32)">
            <summary>
                Converts the <paramref name="buffer"/> to an <see cref="T:System.Double"/> value.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">the zero-based buffer offset</param>
            <returns>the <see cref="T:System.Double"/> value</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the specified buffer is too small in relation with the specified byte <paramref name="offset"/>
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToDouble(System.Byte*)">
            <summary>
                Converts the specified <paramref name="buffer"/> to a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="buffer">a pointer pointing to the memory address of the buffer</param>
            <returns>the <see cref="T:System.Double"/> value</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToFloat(System.Byte[],System.Int32)">
            <summary>
                Converts the <paramref name="buffer"/> to an <see cref="T:System.Single"/> value.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">the zero-based buffer offset</param>
            <returns>the <see cref="T:System.Single"/> value</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the specified buffer is too small in relation with the specified byte <paramref name="offset"/>
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToFloat(System.Byte*,System.Int32)">
            <summary>
                Converts the <paramref name="buffer"/> to an <see cref="T:System.Single"/> value.
            </summary>
            <param name="buffer">a pointer pointing to the memory address of the buffer</param>
            <param name="offset">the zero-based buffer offset</param>
            <returns>the <see cref="T:System.Single"/> value</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToFloat(System.Byte*)">
            <summary>
                Converts the specified <paramref name="buffer"/> to a <see cref="T:System.Single"/> value.
            </summary>
            <param name="buffer">a pointer pointing to the memory address of the buffer</param>
            <returns>the <see cref="T:System.Single"/> value</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToInt16(System.Byte[],System.Int32)">
            <summary>
                Converts the <paramref name="buffer"/> to an <see cref="T:System.Int16"/> value.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">the zero-based buffer offset</param>
            <returns>the <see cref="T:System.Int16"/> value</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the specified buffer is too small in relation with the specified byte <paramref name="offset"/>
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToInt16(System.Byte*,System.Int32)">
            <summary>
                Converts the <paramref name="buffer"/> to an <see cref="T:System.Int16"/> value.
            </summary>
            <param name="buffer">a pointer pointing to the memory address of the buffer</param>
            <param name="offset">the zero-based buffer offset</param>
            <returns>the <see cref="T:System.Int16"/> value</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToInt16(System.Byte*)">
            <summary>
                Converts the specified <paramref name="buffer"/> to a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="buffer">a pointer pointing to the memory address of the buffer</param>
            <returns>the <see cref="T:System.Int16"/> value</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToInt32(System.Byte[],System.Int32)">
            <summary>
                Converts the <paramref name="buffer"/> to an <see cref="T:System.Int32"/> value.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">the zero-based buffer offset</param>
            <returns>the <see cref="T:System.Int32"/> value</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the specified buffer is too small in relation with the specified byte <paramref name="offset"/>
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToInt32(System.Byte*,System.Int32)">
            <summary>
                Converts the <paramref name="buffer"/> to an <see cref="T:System.Int32"/> value.
            </summary>
            <param name="buffer">a pointer pointing to the memory address of the buffer</param>
            <param name="offset">the zero-based buffer offset</param>
            <returns>the <see cref="T:System.Int32"/> value</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToInt32(System.Byte*)">
            <summary>
                Converts the specified <paramref name="buffer"/> to a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="buffer">a pointer pointing to the memory address of the buffer</param>
            <returns>the <see cref="T:System.Int32"/> value</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToInt64(System.Byte[],System.Int32)">
            <summary>
                Converts the <paramref name="buffer"/> to an <see cref="T:System.Int64"/> value.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">the zero-based buffer offset</param>
            <returns>the <see cref="T:System.Int64"/> value</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the specified buffer is too small in relation with the specified byte <paramref name="offset"/>
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToInt64(System.Byte*,System.Int32)">
            <summary>
                Converts the <paramref name="buffer"/> to an <see cref="T:System.Int64"/> value.
            </summary>
            <param name="buffer">a pointer pointing to the memory address of the buffer</param>
            <param name="offset">the zero-based buffer offset</param>
            <returns>the <see cref="T:System.Int64"/> value</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToInt64(System.Byte*)">
            <summary>
                Converts the specified <paramref name="buffer"/> to a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="buffer">a pointer pointing to the memory address of the buffer</param>
            <returns>the <see cref="T:System.Int64"/> value</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToUInt16(System.Byte[],System.Int32)">
            <summary>
                Converts the <paramref name="buffer"/> to an <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">the zero-based buffer offset</param>
            <returns>the <see cref="T:System.UInt16"/> value</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the specified buffer is too small in relation with the specified byte <paramref name="offset"/>
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToUInt16(System.Byte*,System.Int32)">
            <summary>
                Converts the <paramref name="buffer"/> to an <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="buffer">a pointer pointing to the memory address of the buffer</param>
            <param name="offset">the zero-based buffer offset</param>
            <returns>the <see cref="T:System.UInt16"/> value</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToUInt16(System.Byte*)">
            <summary>
                Converts the specified <paramref name="buffer"/> to a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="buffer">a pointer pointing to the memory address of the buffer</param>
            <returns>the <see cref="T:System.UInt16"/> value</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToUInt32(System.Byte[],System.Int32)">
            <summary>
                Converts the <paramref name="buffer"/> to an <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">the zero-based buffer offset</param>
            <returns>the <see cref="T:System.UInt32"/> value</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the specified buffer is too small in relation with the specified byte <paramref name="offset"/>
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToUInt32(System.Byte*,System.Int32)">
            <summary>
                Converts the <paramref name="buffer"/> to an <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="buffer">a pointer pointing to the memory address of the buffer</param>
            <param name="offset">the zero-based buffer offset</param>
            <returns>the <see cref="T:System.UInt32"/> value</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToUInt32(System.Byte*)">
            <summary>
                Converts the specified <paramref name="buffer"/> to a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="buffer">a pointer pointing to the memory address of the buffer</param>
            <returns>the <see cref="T:System.UInt32"/> value</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToUInt64(System.Byte[],System.Int32)">
            <summary>
                Converts the <paramref name="buffer"/> to an <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">the zero-based buffer offset</param>
            <returns>the <see cref="T:System.UInt64"/> value</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the specified buffer is too small in relation with the specified byte <paramref name="offset"/>
            </exception>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToUInt64(System.Byte*,System.Int32)">
            <summary>
                Converts the <paramref name="buffer"/> to an <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="buffer">a pointer pointing to the memory address of the buffer</param>
            <param name="offset">the zero-based buffer offset</param>
            <returns>the <see cref="T:System.UInt64"/> value</returns>
        </member>
        <member name="M:ByteBuffer.Util.BigEndian.ToUInt64(System.Byte*)">
            <summary>
                Converts the specified <paramref name="buffer"/> to a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="buffer">a pointer pointing to the memory address of the buffer</param>
            <returns>the <see cref="T:System.UInt64"/> value</returns>
        </member>
        <member name="T:ByteBuffer.Util.EndianConverter">
            <summary>
                An utility class that helps with swapping endianness.
            </summary>
        </member>
        <member name="P:ByteBuffer.Util.EndianConverter.SystemEndianness">
            <summary>
                Gets the system-endianness.
            </summary>
        </member>
        <member name="M:ByteBuffer.Util.EndianConverter.ShouldSwap(ByteBuffer.Util.Endianness,ByteBuffer.Util.Endianness)">
            <summary>
                Determines whether a byte-swap is needed to preserve the specified byte-order ( <paramref name="endianness"/>).
            </summary>
            <param name="sourceEndianness">the source endianness / the current buffer endianness</param>
            <param name="endianness">the target endianness / the endianness to convert to</param>
            <returns>
                a value indicating whether a byte-swap is needed to preserve the specified byte-order
                ( <paramref name="endianness"/>)
            </returns>
        </member>
        <member name="M:ByteBuffer.Util.EndianConverter.ShouldSwap(ByteBuffer.Util.Endianness)">
            <summary>
                Determines whether a byte-swap is needed to preserve the specified byte-order ( <paramref name="endianness"/>).
            </summary>
            <remarks>This method assumes that the source buffer is in system-endianness byte-order.</remarks>
            <param name="endianness">the target endianness / the endianness to convert to</param>
            <returns>
                a value indicating whether a byte-swap is needed to preserve the specified byte-order
                ( <paramref name="endianness"/>)
            </returns>
        </member>
        <member name="M:ByteBuffer.Util.EndianConverter.SwapEndianness(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Swaps the endianness of the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">the buffer to swap the bytes</param>
            <param name="offset">the buffer swap offset</param>
            <param name="count">the buffer swap count</param>
        </member>
        <member name="M:ByteBuffer.Util.EndianConverter.SwapEndianness(System.Byte[],System.Int32)">
            <summary>
                Swaps the endianness of the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">the buffer to swap the bytes</param>
            <param name="count">the buffer swap count</param>
        </member>
        <member name="M:ByteBuffer.Util.EndianConverter.SwapEndianness(System.Byte[])">
            <summary>
                Swaps the endianness of the whole <paramref name="buffer"/>.
            </summary>
            <param name="buffer">the buffer to swap the bytes</param>
        </member>
        <member name="T:ByteBuffer.Util.Endianness">
            <summary>
                A set of the supported endianness (see: https://en.wikipedia.org/wiki/Endianness for more
                details about Endianness).
            </summary>
        </member>
        <member name="F:ByteBuffer.Util.Endianness.LittleEndian">
            <summary>
                Denotes that the byte-order is little-endian.
            </summary>
        </member>
        <member name="F:ByteBuffer.Util.Endianness.BigEndian">
            <summary>
                Denotes that the byte-order is big-endian.
            </summary>
        </member>
    </members>
</doc>
